//
// This code was created by Jeff Molofee '99 (ported to Linux/GLUT by Richard
// Campbell '99)
//
// If you've found this code useful, please let me know.
//
// Visit me at www.demonews.com/hosted/nehe
// (email Richard Campbell at ulmont@bellsouth.net)
//
// clang-format off
#include <GL/glew.h>
#include <GL/freeglut_std.h>
//#include <GL/gl.h>   // Header File For The OpenGL32 Library
//#include <GL/glu.h>  // Header File For The GLu32 Library
#include <GL/glut.h> // Header File For The GLUT Library
#include <GL/glx.h>  // Header file fot the glx libraries.
#include <glm/ext/matrix_clip_space.hpp>
#include <unistd.h>  // needed to sleep
// clang-format on

#include <ft2build.h>
#include FT_FREETYPE_H

#define WIN32_LEAN_AND_MEAN
// #include <ddraw.h>
#include <math.h>
// #include <mem.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
// #include <windows.h>
// #include <windowsx.h>

void drawAll() {
  // printf("drawing\n");

  // Read from my framebuffer, and write to the default framebuffer.
  glBindFramebuffer(GL_READ_FRAMEBUFFER, framebuffer);
  glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 0);

  // Copy the colour data.
  glBlitFramebuffer(0, 0, WIDTH, HEIGHT, 0, 0, WIDTH, HEIGHT,
                    GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT |
                        GL_STENCIL_BUFFER_BIT,
                    GL_NEAREST);

  // Show what's on the default framebuffer.
  glutSwapBuffers();

  // Now bind my framebuffer again so that subsequent operations are drawn
  // there.
  glBindFramebuffer(GL_FRAMEBUFFER, framebuffer);
}

GLvoid BuildFont(GLvoid) {
  Display *dpy;
  XFontStruct *fontInfo; // storage for our font.

  base = glGenLists(96); // storage for 96 characters.

  // load the font.  what fonts any of you have is going
  // to be system dependent, but on my system they are
  // in /usr/X11R6/lib/X11/fonts/*, with fonts.alias and
  // fonts.dir explaining what fonts the .pcf.gz files
  // are.  in any case, one of these 2 fonts should be
  // on your system...or you won't see any text.

  // get the current display.  This opens a second
  // connection to the display in the DISPLAY environment
  // value, and will be around only long enough to load
  // the font.
  dpy = XOpenDisplay(NULL); // default to DISPLAY env.

  fontInfo = XLoadQueryFont(
      dpy, "-adobe-helvetica-medium-r-normal--18-*-*-*-p-*-iso8859-1");
  if (fontInfo == NULL) {
    fontInfo = XLoadQueryFont(dpy, "fixed");
    if (fontInfo == NULL) {
      printf("no X font available?\n");
    }
  }

  // after loading this font info, this would probably be the time
  // to rotate, scale, or otherwise twink your fonts.

  // start at character 32 (space), get 96 characters (a few characters past z),
  // and store them starting at base.
  glXUseXFont(fontInfo->fid, 32, 96, base);

  // free that font's info now that we've got the
  // display lists.
  XFreeFont(dpy, fontInfo);

  // close down the 2nd display connection.
  XCloseDisplay(dpy);
}

GLvoid KillFont(GLvoid) // delete the font.
{
  glDeleteLists(base, 96); // delete all 96 characters.
}

GLvoid glPrint(char *text) // custom gl print routine.
{
  if (text == NULL) { // if there's no text, do nothing.
    return;
  }

  glPushAttrib(GL_LIST_BIT); // alert that we're about to offset the display
                             // lists with glListBase
  glListBase(base - 32);     // sets the base character to 32.

  glCallLists(strlen(text), GL_UNSIGNED_BYTE,
              text); // draws the display list text.
  glPopAttrib();     // undoes the glPushAttrib(GL_LIST_BIT);
}

void setColour(long c) {
  unsigned char r = (c & 0x00FF0000) >> 16;
  unsigned char g = (c & 0x0000FF00) >> 8;
  unsigned char b = c & 0x000000FF;

  glColor3ub(r, g, b);
}

void textline(int curposx, int curposy, char *stringdata, int fontindex,
              long textcolor) {
  // FIXME: support setting font size
  /*
  // Select font:
  switch (fontindex) {
  case 0:
    SelectObject(hdc, smallfont);
    break;
  case 1:
    SelectObject(hdc, mediumfont);
    break;
  case 2:
    SelectObject(hdc, bigfont);
    break;
  } // Select font.
  */

  setColour(textcolor);
  glRasterPos2i(curposx, curposy);
  glPrint(stringdata);
}

/* A general OpenGL initialization function.  Sets all of the initial
 * parameters. */
void InitGL(
    int Width,
    int Height) // We call this right after our OpenGL window is created.
{
  glClearColor(0.0f, 0.0f, 0.0f,
               0.0f);      // This Will Clear The Background Color To Black
  glClearDepth(1.0);       // Enables Clearing Of The Depth Buffer
  glDepthFunc(GL_ALWAYS);  // The Type Of Depth Test To Do
  glEnable(GL_DEPTH_TEST); // Enables Depth Testing
  glShadeModel(GL_SMOOTH); // Enables Smooth Color Shading

  glMatrixMode(GL_PROJECTION);
  glLoadIdentity(); // Reset The Projection Matrix

  gluOrtho2D(0, Width, Height, 0);

  glMatrixMode(GL_MODELVIEW);

  BuildFont();
}

/* The function called when our window is resized (which shouldn't happen,
 * because we're fullscreen) */
void ReSizeGLScene(int Width, int Height) {
  if (Height == 0) // Prevent A Divide By Zero If The Window Is Too Small
    Height = 1;

  glViewport(0, 0, Width, Height);

  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();

  gluOrtho2D(0, Width, Height, 0);
  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();
}

/* The main drawing function. */
void DrawGLScene() {
  glLoadIdentity(); // Reset The View

  if (paintOnNextFrame) {
    switch (programMode) {
    case 0:
      // Copy & ant-anilize from pixel-buffer to screen:
      showpic();
      // Initiate iteration parameters:
      newrender();
      renderactive = true;
      // Clear screen if set was changed?:
      if (newset) {
        clearallbufs(bgcol[showbackground]);
        newset = false;
        // Then - agin! =)
        showpic();
      }
      // "tag" screen =)
      SunCode();
      break;
    case 1:
      // View info screen:
      manual();
      break;
    }
    drawAll();
    paintOnNextFrame = false;
  }

  // if render screen is up then iterate:
  if ((programMode == 0) && renderactive) {
    DoMyStuff();
    drawAll();
  }
}

void keyDownCallbackSpecial(int key, int x, int y) {
  /* avoid thrashing this call */
  usleep(100);

  bool valid_keypress = true;

  // Do keys, (two modes)
  switch (programMode) {
  case 0:
    // Render screen:
    switch (key) {
      // FIXME: do we even need this? we already have such functionality
      /*
  case VK_ESCAPE:
    renderactive = false;
    PostMessage(hWnd, WM_CLOSE, 0, 0);
    break; // Escape.
       */

    case GLUT_KEY_HOME:
      ryv = 0.0f * rad;
      rxv = 0.0f * rad;
      CamAng();
      imszoom = 1.0f;
      newrender();
      clearallbufs(bgcol[showbackground]);
      clearscreen(bgcol[showbackground]);
      SunCode();
      break; // page down.

    case GLUT_KEY_F1:
      trees[treeinuse].usehig = (trees[treeinuse].usehig + 1) & 0x01;
      newrender();
      clearallbufs(bgcol[showbackground]);
      clearscreen(bgcol[showbackground]);
      printtreeinfo();
      SunCode();
      break; // F1.

    case GLUT_KEY_F2:
      trees[treeinuse].glblscl = (trees[treeinuse].glblscl + 1) & 0x01;
      newrender();
      clearallbufs(bgcol[showbackground]);
      clearscreen(bgcol[showbackground]);
      printtreeinfo();
      SunCode();
      break; // F2.

    case GLUT_KEY_F3:
      trees[treeinuse].sctrnsl = (trees[treeinuse].sctrnsl + 1) & 0x01;
      newrender();
      clearallbufs(bgcol[showbackground]);
      clearscreen(bgcol[showbackground]);
      printtreeinfo();
      SunCode();
      break; // F3.

    case GLUT_KEY_F4:
      trees[treeinuse].usetwst = (trees[treeinuse].usetwst + 1) & 0x01;
      newrender();
      clearallbufs(bgcol[showbackground]);
      clearscreen(bgcol[showbackground]);
      printtreeinfo();
      SunCode();
      break; // F4.
    default:
      valid_keypress = false;
      break;

    } // wparam (render screen).
    break;

    // Intro screen:
  case 1:
    switch (key) {
      // FIXME: do we even need this? we already have such functionality
      /*
  case VK_ESCAPE:
    PostMessage(hWnd, WM_CLOSE, 0, 0);
    break; // Escape.
       */

    case GLUT_KEY_F1:
      trees[treeinuse].usehig = (trees[treeinuse].usehig + 1) & 0x01;
      newrender();
      clearscreenbufs(bgcol[showbackground]);
      printtreeinfo();
      break; // F1.

    case GLUT_KEY_F2:
      trees[treeinuse].glblscl = (trees[treeinuse].glblscl + 1) & 0x01;
      newrender();
      clearscreenbufs(bgcol[showbackground]);
      printtreeinfo();
      break; // F2.

    case GLUT_KEY_F3:
      trees[treeinuse].sctrnsl = (trees[treeinuse].sctrnsl + 1) & 0x01;
      newrender();
      clearscreenbufs(bgcol[showbackground]);
      printtreeinfo();
      break; // F3.

    case GLUT_KEY_F4:
      trees[treeinuse].usetwst = (trees[treeinuse].usetwst + 1) & 0x01;
      newrender();
      clearscreenbufs(bgcol[showbackground]);
      printtreeinfo();
      break; // F4.
    default:
      valid_keypress = false;
      break;

    } // wparam (info screen).

    break;
  default:
    valid_keypress = false;
    break;
  }

  if (valid_keypress) {
    drawAll();
  }
}

/* The function called whenever a key is pressed down. */
void keyDownCallback(unsigned char key, int x, int y) {
  /* avoid thrashing this call */
  usleep(100);

  bool valid_keypress = true;

  // Do keys, (two modes)
  switch (programMode) {
  case 0:
    // Render screen:
    switch (key) {
    case ESCAPE:
      /* If escape is pressed, kill everything. */
      /* shut down our window */
      glutDestroyWindow(window);

      /* exit the program...normal termination. */
      exit(0);
      break;
    case ' ':
      renderactive = false;
      programMode = 1;
      paintOnNextFrame = true;
      break;
      // FIXME: implement these keys exactly!
      /*
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
    randombranch(wParam - 49);
    clearallbufs(bgcol[showbackground]);
    clearscreen(bgcol[showbackground]);
    printtreeinfo();
    writecols();
    clearViewmess();
    SunCode();
    break; // 1 - 8.
       */

    case 'A':
      ryv = -180.0f * rad + RND * 360.0f * rad;
      ryx = cosl(ryv);
      ryy = sinl(ryv);
      rxv = -10.0f * rad + RND * 100.0f * rad;
      rxx = cosl(rxv);
      rxy = sinl(rxv);
      newrender();
      clearscreenbufs(bgcol[showbackground]);
      clearscreen(bgcol[showbackground]);
      SunCode();
      break; // A.

    case 'C':
      clearscreenbufs(bgcol[showbackground]);
      trees[treeinuse].radius *= sqrtl(twup);
      break; // C.

    case 'D':
      trees[treeinuse].radius *= twup;
      newrender();
      break; // D.

    case 'E':
      if (++logfoliage >= 3)
        logfoliage = 0;
      newrender();
      clearallbufs(bgcol[showbackground]);
      clearscreen(bgcol[showbackground]);
      SunCode();
      printsceneinfo();
      if (logfoliage != 1)
        writecols();
      break; // E.

    case 'F':
      trees[treeinuse].radius *= twdwn;
      newrender();
      break; // F.

    case 'G':
      groundsize++;
      if (groundsize > 2)
        groundsize = 0;
      // Re initiate ground-IFS
      createbackground();
      newrender();
      clearscreenbufs(bgcol[showbackground]);
      clearscreen(bgcol[showbackground]);
      SunCode();
      printsceneinfo();
      break; // G.

    case 'I':
      printsceneinfo();
      lcol = txcol[showbackground];
      pixelsmess();
      printtreeinfo();
      writecols();
      if (colourmode)
        ShowPalette(ABSZ);
      SunCode();
      break; // I.

      // Don't push this key!!!
      // (The function does not work good yet.)
    case 'K':
      if (!lockshadow)
        lockshadow = true;
      trees[treeinuse].radius *= sqrtl(twup);
      clearscreenbufs(bgcol[showbackground]);
      break; // K.

    case 'L':
      lightness++;
      if (lightness > 1)
        lightness = 0;
      newrender();
      clearscreenbufs(bgcol[showbackground]);
      clearscreen(bgcol[showbackground]);
      SunCode();
      printsceneinfo();
      break; // L.

    case 'M':
      if (++treeinuse >= NUMTREES)
        treeinuse = 0;
      newsetup();
      clearallbufs(bgcol[showbackground]);
      clearscreen(bgcol[showbackground]);
      SunCode();
      printtreeinfo();
      printsceneinfo();
      writecols();
      break; // M.

    case 'N':
      if (++selnumbranch > 7)
        selnumbranch = 0;
      newsetup();
      clearallbufs(bgcol[showbackground]);
      clearscreen(bgcol[showbackground]);
      SunCode();
      printtreeinfo();
      printsceneinfo();
      writecols();
      break; // N.

    case 'O':
      clearscreen(bgcol[showbackground]);
      if (++colourmode > 1)
        colourmode = 0;
      if (colourmode) {
        CreatePalette();
        ShowPalette(ABSZ);
      }
      stemcols();
      leafcols();
      printsceneinfo();
      newrender();
      writecols();
      clearViewmess();
      clearscreenbufs(bgcol[showbackground]);
      SunCode();
      break; // N.

    case 'P':
      clearscreen(bgcol[showbackground]);
      if (colourmode) {
        CreatePalette();
        ShowPalette(ABSZ);
      }
      stemcols();
      leafcols();
      printsceneinfo();
      newrender();
      writecols();
      clearViewmess();
      clearscreenbufs(bgcol[showbackground]);
      SunCode();
      break; // P.

    case 'R':
      treeinuse = 31;
      newsetup();
      clearallbufs(bgcol[showbackground]);
      clearscreen(bgcol[showbackground]);
      printtreeinfo();
      writecols();
      clearViewmess();
      SunCode();
      break; // R.

    case 'S':
      trees[treeinuse].height *= twdwn;
      newrender();
      break; // S.

    case 'T':
      FILLBOX(0, 0, WIDTH, HEIGHT, 0x00FFFFFF);
      SunCode();
      lcol = 0x00000080;
      pixelsmess();
      break; // T.

    case 'U':
      if (++useLoCoS >= 3)
        useLoCoS = 0;
      else
        trees[treeinuse].radius = fabsl(trees[treeinuse].height / 2.0f);
      newrender();
      clearallbufs(bgcol[showbackground]);
      clearscreen(bgcol[showbackground]);
      SunCode();
      break; // U.

    case 'V':
      showpic();
      break; // V.

    case 'W':
      whitershade++;
      if (whitershade > 2)
        whitershade = 0;
      newrender();
      clearscreenbufs(bgcol[showbackground]);
      clearscreen(bgcol[showbackground]);
      SunCode();
      printsceneinfo();
      break; // W.

    case 'X':
      trees[treeinuse].height *= twup;
      newrender();
      break; // X.
    default:
      valid_keypress = false;
      break;

    } // wparam (render screen).
    break;

    // Intro screen:
  case 1:
    switch (key) {
    case ESCAPE:
      /* If escape is pressed, kill everything. */
      /* shut down our window */
      glutDestroyWindow(window);

      /* exit the program...normal termination. */
      exit(0);
      break;
    case ' ':
      programMode = 0;
      paintOnNextFrame = true;
      break; // Space.

    case 'E':
      if (++logfoliage >= 3)
        logfoliage = 0;
      newrender();
      clearallbufs(bgcol[showbackground]);
      break; // E.

    case 'I':
      printsceneinfo();
      printtreeinfo();
      break; // I.

    case 'L':
      lightness++;
      if (lightness > 1)
        lightness = 0;
      newrender();
      newset = true;
      printsceneinfo();
      break; // L.

    case 'M':
      if (++treeinuse >= NUMTREES)
        treeinuse = 0;
      newsetup();
      clearallbufs(bgcol[showbackground]);
      viewcols();
      printtreeinfo();
      break; // M.

    case 'N':
      if (++selnumbranch > 7)
        selnumbranch = 0;
      newsetup();
      clearallbufs(bgcol[showbackground]);
      viewcols();
      printsceneinfo();
      printtreeinfo();
      break; // N.

    case 'O':
      if (++colourmode > 1)
        colourmode = 0;
      if (colourmode)
        CreatePalette();
      stemcols();
      leafcols();
      newrender();
      viewcols();
      printsceneinfo();
      clearscreenbufs(bgcol[showbackground]);
      break; // N.

    case 'P':
      if (colourmode)
        CreatePalette();
      stemcols();
      leafcols();
      newrender();
      viewcols();
      clearscreenbufs(bgcol[showbackground]);
      break; // P.

    case 'R':
      treeinuse = 31;
      newsetup();
      newset = true;
      printtreeinfo();
      viewcols();
      break; // R.

    case 'U':
      if (++useLoCoS >= 3)
        useLoCoS = 0;
      else
        trees[treeinuse].radius = (fabsl(trees[treeinuse].height) / 3.0f);
      newrender();
      break; // U.

    case 'W':
      whitershade++;
      if (whitershade > 2)
        whitershade = 0;
      newrender();
      newset = true;
      printsceneinfo();
      break; // W.
    default:
      valid_keypress = false;
      break;

    } // wparam (info screen).

    break;
  default:
    valid_keypress = false;
    break;
  }

  if (valid_keypress) {
    drawAll();
  }
}

/* The function called whenever a key is released. */
void keyUpCallback(unsigned char key, int x, int y) {
  /* avoid thrashing this call */
  usleep(100);

  // Functions only active if render screen:
  if (renderactive) {
    bool valid_keypress = true;

    switch (key) {
    case 'D':
    case 'F':
    case 'S':
    case 'X':
      clearallbufs(bgcol[showbackground]);
      clearscreen(bgcol[showbackground]);
      SunCode();
      break; // Clear all keys.
    default:
      valid_keypress = false;
      break;
    }

    if (valid_keypress) {
      drawAll();
    }
  }
}

int main(int argc, char **argv) {
  // my initial state
  paintOnNextFrame = true;

  /* Initialize GLUT state - glut will take any command line arguments that
     pertain to it or X Windows - look at its documentation at
     http://reality.sgi.com/mjk/spec3/spec3.html */
  glutInit(&argc, argv);

  /* Select type of Display mode:
     Double buffer
     RGBA color
     Alpha components supported
     Depth buffered for automatic clipping */
  glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_ALPHA | GLUT_DEPTH);

  /* get a window */
  glutInitWindowSize(WIDTH, HEIGHT);

  /* the window starts at the upper left corner of the screen */
  glutInitWindowPosition(0, 0);

  /* Open a window */
  window = glutCreateWindow("my window");

  /* Register the function to do all our OpenGL drawing. */
  glutDisplayFunc(&DrawGLScene);

  /* Even if there are no events, redraw our gl scene. */
  glutIdleFunc(&DrawGLScene);

  /* Register the function called when our window is resized. */
  glutReshapeFunc(&ReSizeGLScene);

  /* Register the functions called when the keyboard is pressed. */
  glutKeyboardUpFunc(&keyUpCallback);
  glutKeyboardFunc(&keyDownCallback);
  glutSpecialUpFunc(&keyUpCallbackSpecial);
  glutSpecialFunc(&keyDownCallbackSpecial);

  initiateIFS();

  /* Initialize our window. */
  InitGL(WIDTH, HEIGHT);

  glewInit();

  glGenFramebuffers(1, &framebuffer);
  glBindFramebuffer(GL_FRAMEBUFFER, framebuffer);
  unsigned int textureColorbuffer;
  glGenTextures(1, &textureColorbuffer);
  glBindTexture(GL_TEXTURE_2D, textureColorbuffer);
  glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, WIDTH, HEIGHT, 0, GL_RGB,
               GL_UNSIGNED_BYTE, NULL);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
  glBindTexture(GL_TEXTURE_2D, 0);

  // attach it to currently bound framebuffer object
  glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D,
                         textureColorbuffer, 0);

  if (glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE) {
    printf("bad\n");
    exit(1);
  }

  Shader basicShaderProgram("basic.vs", "basic.fs");
  basicShader = &basicShaderProgram;
  projectionMatrix =
      glm::ortho(0.0f, (float)WIDTH, (float)HEIGHT, 0.0f, -1.0f, 1.0f);

  /* Start Event Processing Engine */
  glutMainLoop();

  return 1;
}
